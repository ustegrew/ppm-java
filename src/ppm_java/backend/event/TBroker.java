/* -----------------------------------------------------------------------------
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
----------------------------------------------------------------------------- */

package ppm_java.backend.event;

import ppm_java.typelib.IEvented;
import ppm_java.typelib.VBrowseable;
import ppm_java.util.storage.arrayMap.TAtomicArrayMap;

/**
 * Receives events and sends them to subscribed clients.
 * This is the backbone of the runtime control messaging  
 * system connecting the various modules.
 * 
 * We identify an event by a plain vanilla integer constant. Java texbook approach
 * would dictate using an enumerator or a dedicated class hierarchy for events. 
 * We deviate from the textbook approach, because both approaches involve creating 
 * objects. That's fine for the occasional event. However, for a constant stream 
 * of events (such as generated by the {@link TTimer} class) this results in ongoing
 * creation of throw-away objects many times per second. This smells like a silly design.
 * Therefore we resort to the out-of-date technique of using integer constants. This
 * is much more performant.
 * 
 * @author  Peter Hoppe
 * @see     IEvented
 */
public class TBroker
{
    /**
     * Internal flag: No in-band parameter
     */
    private static final int    gkArgsNone              = 0;
    
    /**
     * Internal flag: One in-band parameter of type int
     */
    private static final int    gkArgsOneInt            = 10;
    
    /**
     * Internal flag: One in-band parameter of type long
     */
    private static final int    gkArgsOneLong           = 20;
    
    /**
     * Internal flag: One in-band parameter of type String
     */
    private static final int    gkArgsOneString         = 30;
    
    /**
     * Complete list of subscriptions used in this session. 
     */
    private TAtomicArrayMap<TBrokerSubscriptionList>    fSubscriptions;
    
    /**
     * cTor.
     */
    public TBroker ()
    {
        fSubscriptions = new TAtomicArrayMap<> ();
    }
    
    /**
     * Broker an event with no in-band parameter.
     * 
     * @param e             The event being brokered.
     * @param idSource      ID of the module that has fired the event.
     */
    public void Broker (int e, String idSource)
    {
        _Broker (e, idSource, gkArgsNone, 0, 0, null);
    }
    
    /**
     * Broker an event with one in-band parameter (int). The parameter 
     * carries extra information needed by the recipient.
     * 
     * @param e             The event being brokered.
     * @param arg0          The in-band parameter.
     * @param idSource      ID of the module that has fired the event.
     */
    public void Broker (int e, int arg0, String idSource)
    {
        _Broker (e, idSource, gkArgsOneInt, arg0, 0, null);
    }
    
    /**
     * Broker an event with one in-band parameter (long). The parameter 
     * carries extra information needed by the recipient.
     * 
     * @param e             The event being brokered.
     * @param arg0          The in-band parameter.
     * @param idSource      ID of the module that has fired the event.
     */
    public void Broker (int e, long arg0, String idSource)
    {
        _Broker (e, idSource, gkArgsOneLong, 0, arg0, null);
    }
    
    /**
     * Broker an event with one in-band parameter (String). The parameter 
     * carries extra information needed by the recipient.
     * 
     * @param e             The event being brokered.
     * @param arg0          The in-band parameter.
     * @param idSource      ID of the module that has fired the event.
     */
    public void Broker (int e, String arg0, String idSource)
    {
        _Broker (e, idSource, gkArgsOneString, 0, 0, arg0);
    }
    
    /**
     * Internal broker worker method.
     * 
     * @param e             The event being brokered.
     * @param idSource      ID of the module that has fired the event.
     * @param argsType      Which type is the in-band parameter (none, int, long, String)?
     * @param arg_0_0       If in-band parameter is an int: Its value.
     * @param arg_0_1       If in-band parameter is a long: Its value.
     * @param arg_1_0       If in-band parameter is a String: Its value.
     */
    private void _Broker (int e, String idSource, int argsType, int arg_0_0, long arg_0_1, String arg_1_0)
    {
        TBrokerSubscription     subscr;
        TBrokerSubscriptionList subscrList;
        int                     i;
        int                     n;
        IEvented                receiver;
        
        subscrList  = fSubscriptions.Get (idSource);
        n           = subscrList.GetNumElements ();
        if (n >= 1)
        {
            for (i = 0; i < n; i++)
            {
                subscr      = subscrList.Get (i);
                receiver    = (IEvented) subscr.GetSubscriber ();
                if (argsType == gkArgsNone)                             /* [100] */
                {
                    receiver.OnEvent (e);
                }
                else if (argsType == gkArgsOneInt)
                {
                    receiver.OnEvent (e, arg_0_0);
                }
                else if (argsType == gkArgsOneLong)
                {
                    receiver.OnEvent (e, arg_0_1);
                }
                else if (argsType == gkArgsOneString)
                {
                    receiver.OnEvent (e, arg_1_0);
                }
            }
        }
    }
    
    /**
     * Subscribes an {@link IEvented} object (subscriber) to receive events 
     * from another {@link VBrowseable} (subscribed). The subscriber will 
     * receive all events emitted by the subscribed and needs to implement 
     * its own event filtering to listen to the events it's interested in.
     * 
     * @param subscribed        Subscribed.
     * @param subscriber        Subscriber.
     */
    public void Subscribe (VBrowseable subscribed, IEvented subscriber)
    {
        TBrokerSubscriptionList     subscrList;
        TBrokerSubscription         subscr;
        String                      key;
        boolean                     hasKey;
        
        key         = subscribed.GetID ();
        hasKey      = fSubscriptions.HasElement (key);
        if (hasKey)
        {
            subscrList = fSubscriptions.Get (key);
        }
        else
        {
            subscrList = new TBrokerSubscriptionList (subscribed);
            fSubscriptions.Set (key, subscrList);
        }
        
        subscr = new TBrokerSubscription (subscribed, subscriber);
        subscrList.Add (subscr);  
    }
}
